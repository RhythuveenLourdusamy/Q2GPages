{"uid":"3220078641e96b6d","name":"Test Case 513 - AGGREGATE_FUNCTION_WITH_TIME","fullName":"tests.q2g.jeeves_singleturn_test#test_single_turn_case","historyId":"6cf98bff165ce58fa9ca24983949423d","time":{"start":1729006398399,"stop":1729006407328,"duration":8929},"status":"failed","statusMessage":"AssertionError: [\"One WHERE clause uses 'CURRENT_TIMESTAMP' while the other uses 'CURRENT_DATE', causing them to refer to different granularities of time.\"] JEEVES_WORKFLOW_ID: e6a4ccb7-686e-4177-b608-79585ecd3ac9","statusTrace":"use_case = 'AGGREGATE_FUNCTION_WITH_TIME'\nuser_question = 'Give me the maximum Cost of Assets in the last 5 seconds'\ntest_case = 513\nexpected_json = {'from': [{'name': 'Assets', 'product': 'freshservice', 'resource': 'Assets', 'type': 'RESOURCE'}], 'resources': {'Ass...CTION'}, {'type': 'INTERVAL', 'unit': 'second', 'value': 5}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}}\nexpected_sql = \"SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_TIMESTAMP - INTERVAL '5 second'\"\n\n    @pytest.mark.parametrize(\n        \"use_case, user_question, test_case, expected_json, expected_sql\",\n        ConversationAPIHelper.load_test_cases_data(product) # Kindly add the filter in template_mapper.json file before using it\n    )\n    @allure.step(\"Test single-turn conversation API\")\n    def test_single_turn_case(use_case, user_question, test_case, expected_json, expected_sql):\n>       base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n\ntests/q2g/jeeves_singleturn_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.q2g_helper.BaseConversationTest.BaseConversationTest object at 0x11c87ee70>\nuse_case = 'AGGREGATE_FUNCTION_WITH_TIME'\nuser_question = 'Give me the maximum Cost of Assets in the last 5 seconds'\ntest_case = 513\nexpected_json = {'from': [{'name': 'Assets', 'product': 'freshservice', 'resource': 'Assets', 'type': 'RESOURCE'}], 'resources': {'Ass...CTION'}, {'type': 'INTERVAL', 'unit': 'second', 'value': 5}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}}\n\n    def common_test_logic(self, use_case, user_question, test_case, expected_json):\n        # time.sleep(30)\n        # Get the response JSON from the API call\n        response = self.api_helper.get_response_json(user_question, test_case)\n    \n        # Assert on the response code\n        assert response.status_code == 200, f\"Expected 200, got {response.status_code}. JEEVES_WORKFLOW_ID: {response.headers.get('jeeves-wf-id')}\"\n    \n        response_json = response.json()\n        jeeves_wf_id = response.headers.get('jeeves-wf-id', 'Unknown')\n    \n        # Extract the 'common_json' field from the response\n        common_json = ConversationAPIHelper.get(response_json, 'common_json')\n        # Fail the test if common_json is empty\n        assert common_json, f\"common_json is empty. Probably a multi-turn use-case. JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\n    \n        # Extract the 'query' field from the common_json, if it is present\n        actual_json = ConversationAPIHelper.get(common_json, 'query')\n    \n        # Validate the actual JSON with the expected JSON\n        result = validate_jsons(expected_json, actual_json if actual_json else common_json)\n    \n        allure.dynamic.title(f\"Test Case {test_case} - {use_case}\")\n    \n        # Assert the validation result\n>       assert result.get(\"result\"), f\"{result.get('message')} JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\nE       AssertionError: [\"One WHERE clause uses 'CURRENT_TIMESTAMP' while the other uses 'CURRENT_DATE', causing them to refer to different granularities of time.\"] JEEVES_WORKFLOW_ID: e6a4ccb7-686e-4177-b608-79585ecd3ac9\n\nutils/q2g_helper/BaseConversationTest.py:35: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1729004625624,"stop":1729004625767,"duration":143},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: [\"One WHERE clause uses 'CURRENT_TIMESTAMP' while the other uses 'CURRENT_DATE', causing them to refer to different granularities of time.\"] JEEVES_WORKFLOW_ID: e6a4ccb7-686e-4177-b608-79585ecd3ac9","statusTrace":"use_case = 'AGGREGATE_FUNCTION_WITH_TIME'\nuser_question = 'Give me the maximum Cost of Assets in the last 5 seconds'\ntest_case = 513\nexpected_json = {'from': [{'name': 'Assets', 'product': 'freshservice', 'resource': 'Assets', 'type': 'RESOURCE'}], 'resources': {'Ass...CTION'}, {'type': 'INTERVAL', 'unit': 'second', 'value': 5}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}}\nexpected_sql = \"SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_TIMESTAMP - INTERVAL '5 second'\"\n\n    @pytest.mark.parametrize(\n        \"use_case, user_question, test_case, expected_json, expected_sql\",\n        ConversationAPIHelper.load_test_cases_data(product) # Kindly add the filter in template_mapper.json file before using it\n    )\n    @allure.step(\"Test single-turn conversation API\")\n    def test_single_turn_case(use_case, user_question, test_case, expected_json, expected_sql):\n>       base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n\ntests/q2g/jeeves_singleturn_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.q2g_helper.BaseConversationTest.BaseConversationTest object at 0x11c87ee70>\nuse_case = 'AGGREGATE_FUNCTION_WITH_TIME'\nuser_question = 'Give me the maximum Cost of Assets in the last 5 seconds'\ntest_case = 513\nexpected_json = {'from': [{'name': 'Assets', 'product': 'freshservice', 'resource': 'Assets', 'type': 'RESOURCE'}], 'resources': {'Ass...CTION'}, {'type': 'INTERVAL', 'unit': 'second', 'value': 5}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}}\n\n    def common_test_logic(self, use_case, user_question, test_case, expected_json):\n        # time.sleep(30)\n        # Get the response JSON from the API call\n        response = self.api_helper.get_response_json(user_question, test_case)\n    \n        # Assert on the response code\n        assert response.status_code == 200, f\"Expected 200, got {response.status_code}. JEEVES_WORKFLOW_ID: {response.headers.get('jeeves-wf-id')}\"\n    \n        response_json = response.json()\n        jeeves_wf_id = response.headers.get('jeeves-wf-id', 'Unknown')\n    \n        # Extract the 'common_json' field from the response\n        common_json = ConversationAPIHelper.get(response_json, 'common_json')\n        # Fail the test if common_json is empty\n        assert common_json, f\"common_json is empty. Probably a multi-turn use-case. JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\n    \n        # Extract the 'query' field from the common_json, if it is present\n        actual_json = ConversationAPIHelper.get(common_json, 'query')\n    \n        # Validate the actual JSON with the expected JSON\n        result = validate_jsons(expected_json, actual_json if actual_json else common_json)\n    \n        allure.dynamic.title(f\"Test Case {test_case} - {use_case}\")\n    \n        # Assert the validation result\n>       assert result.get(\"result\"), f\"{result.get('message')} JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\nE       AssertionError: [\"One WHERE clause uses 'CURRENT_TIMESTAMP' while the other uses 'CURRENT_DATE', causing them to refer to different granularities of time.\"] JEEVES_WORKFLOW_ID: e6a4ccb7-686e-4177-b608-79585ecd3ac9\n\nutils/q2g_helper/BaseConversationTest.py:35: AssertionError","steps":[{"name":"Test single-turn conversation API","time":{"start":1729006398399,"stop":1729006407327,"duration":8928},"status":"failed","statusMessage":"AssertionError: [\"One WHERE clause uses 'CURRENT_TIMESTAMP' while the other uses 'CURRENT_DATE', causing them to refer to different granularities of time.\"] JEEVES_WORKFLOW_ID: e6a4ccb7-686e-4177-b608-79585ecd3ac9\n","statusTrace":"  File \"/Users/rl/PycharmProjects/auroraTestAutomation/APIautomation/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/tests/q2g/jeeves_singleturn_test.py\", line 17, in test_single_turn_case\n    base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/utils/q2g_helper/BaseConversationTest.py\", line 35, in common_test_logic\n    assert result.get(\"result\"), f\"{result.get('message')} JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\n           ^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"use_case","value":"'AGGREGATE_FUNCTION_WITH_TIME'"},{"name":"user_question","value":"'Give me the maximum Cost of Assets in the last 5 seconds'"},{"name":"test_case","value":"513"},{"name":"expected_json","value":"{'select': [{'name': 'MAX', 'arguments': [{'resource': 'Assets', 'name': 'Cost', 'type': 'FIELD'}], 'type': 'FUNCTION'}], 'from': [{'product': 'freshservice', 'resource': 'Assets', 'name': 'Assets', 'type': 'RESOURCE'}], 'where': {'lhs': {'resource': 'Assets', 'name': 'Created Date', 'type': 'FIELD'}, 'type': 'CONDITION', 'rhs': {'name': 'SUB', 'arguments': [{'name': 'CURRENT_TIMESTAMP', 'arguments': [], 'type': 'FUNCTION'}, {'unit': 'second', 'type': 'INTERVAL', 'value': 5}], 'type': 'FUNCTION'}, 'operator': 'GTE'}, 'resources': {'Assets': {'product': 'freshservice', 'name': 'Assets'}}}"},{"name":"expected_sql","value":"'SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_TIMESTAMP - INTERVAL '5 second''"}],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"attachments":[{"uid":"87a222283410081a","name":"stdout","source":"87a222283410081a.txt","type":"text/plain","size":4964}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.q2g"},{"name":"suite","value":"jeeves_singleturn_test"},{"name":"host","value":"FWS-CHE-LT-6357"},{"name":"thread","value":"87157-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.q2g.jeeves_singleturn_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_json","value":"{'select': [{'name': 'MAX', 'arguments': [{'resource': 'Assets', 'name': 'Cost', 'type': 'FIELD'}], 'type': 'FUNCTION'}], 'from': [{'product': 'freshservice', 'resource': 'Assets', 'name': 'Assets', 'type': 'RESOURCE'}], 'where': {'lhs': {'resource': 'Assets', 'name': 'Created Date', 'type': 'FIELD'}, 'type': 'CONDITION', 'rhs': {'name': 'SUB', 'arguments': [{'name': 'CURRENT_TIMESTAMP', 'arguments': [], 'type': 'FUNCTION'}, {'unit': 'second', 'type': 'INTERVAL', 'value': 5}], 'type': 'FUNCTION'}, 'operator': 'GTE'}, 'resources': {'Assets': {'product': 'freshservice', 'name': 'Assets'}}}"},{"name":"expected_sql","value":"'SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_TIMESTAMP - INTERVAL '5 second''"},{"name":"test_case","value":"513"},{"name":"use_case","value":"'AGGREGATE_FUNCTION_WITH_TIME'"},{"name":"user_question","value":"'Give me the maximum Cost of Assets in the last 5 seconds'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"3220078641e96b6d.json","parameterValues":["{'select': [{'name': 'MAX', 'arguments': [{'resource': 'Assets', 'name': 'Cost', 'type': 'FIELD'}], 'type': 'FUNCTION'}], 'from': [{'product': 'freshservice', 'resource': 'Assets', 'name': 'Assets', 'type': 'RESOURCE'}], 'where': {'lhs': {'resource': 'Assets', 'name': 'Created Date', 'type': 'FIELD'}, 'type': 'CONDITION', 'rhs': {'name': 'SUB', 'arguments': [{'name': 'CURRENT_TIMESTAMP', 'arguments': [], 'type': 'FUNCTION'}, {'unit': 'second', 'type': 'INTERVAL', 'value': 5}], 'type': 'FUNCTION'}, 'operator': 'GTE'}, 'resources': {'Assets': {'product': 'freshservice', 'name': 'Assets'}}}","'SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_TIMESTAMP - INTERVAL '5 second''","513","'AGGREGATE_FUNCTION_WITH_TIME'","'Give me the maximum Cost of Assets in the last 5 seconds'"]}