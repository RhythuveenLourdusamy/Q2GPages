{"uid":"4aa038551bb8e07d","name":"test_single_turn_case[AGGREGATE_FUNCTION_WITH_TIME-Give me the maximum Cost of Assets in the last 8 weeks-517-expected_json516-SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_DATE - INTERVAL '8 week']","fullName":"tests.q2g.jeeves_singleturn_test#test_single_turn_case","historyId":"ca41ce35ad9fea056077ee94a54cfe23","time":{"start":1729006403494,"stop":1729006411916,"duration":8422},"status":"broken","statusMessage":"TypeError: 'NoneType' object is not subscriptable","statusTrace":"use_case = 'AGGREGATE_FUNCTION_WITH_TIME'\nuser_question = 'Give me the maximum Cost of Assets in the last 8 weeks'\ntest_case = 517\nexpected_json = {'from': [{'name': 'Assets', 'product': 'freshservice', 'resource': 'Assets', 'type': 'RESOURCE'}], 'resources': {'Ass...UNCTION'}, {'type': 'INTERVAL', 'unit': 'week', 'value': 8}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}}\nexpected_sql = \"SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_DATE - INTERVAL '8 week'\"\n\n    @pytest.mark.parametrize(\n        \"use_case, user_question, test_case, expected_json, expected_sql\",\n        ConversationAPIHelper.load_test_cases_data(product) # Kindly add the filter in template_mapper.json file before using it\n    )\n    @allure.step(\"Test single-turn conversation API\")\n    def test_single_turn_case(use_case, user_question, test_case, expected_json, expected_sql):\n>       base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n\ntests/q2g/jeeves_singleturn_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/q2g_helper/BaseConversationTest.py:30: in common_test_logic\n    result = validate_jsons(expected_json, actual_json if actual_json else common_json)\nutils/q2g_helper/json_validator.py:632: in validate_jsons\n    results.append(where_clause_check(expected_json, actual_json, resource_map))\nutils/q2g_helper/json_validator.py:333: in where_clause_check\n    result = make_llm_call(where_expected, where_actual)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nwhere_expected = {'lhs': {'name': 'Created Date', 'resource': 'Assets', 'type': 'FIELD'}, 'operator': 'GTE', 'rhs': {'arguments': [{'ar...FUNCTION'}, {'type': 'INTERVAL', 'unit': 'week', 'value': 8}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}\nwhere_actual = {'lhs': {'name': 'Created Date', 'type': 'FIELD'}, 'operator': 'GTE', 'rhs': {'arguments': [{'arguments': [], 'name': ...FUNCTION'}, {'type': 'INTERVAL', 'unit': 'week', 'value': 8}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}\n\n    def make_llm_call(where_expected, where_actual):\n        # Form LLM input payload\n        input_payload = {\n            \"where_clause_1\": where_expected,\n            \"where_clause_2\": where_actual\n        }\n    \n        # Make the LLM call\n        llm_response = make_openai_post_request(prompt, input_payload)\n    \n>       result_str = llm_response.get(\"choices\")[0].get(\"message\").get(\"content\")\nE       TypeError: 'NoneType' object is not subscriptable\n\nutils/q2g_helper/json_validator.py:287: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1729004625624,"stop":1729004625767,"duration":143},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"TypeError: 'NoneType' object is not subscriptable","statusTrace":"use_case = 'AGGREGATE_FUNCTION_WITH_TIME'\nuser_question = 'Give me the maximum Cost of Assets in the last 8 weeks'\ntest_case = 517\nexpected_json = {'from': [{'name': 'Assets', 'product': 'freshservice', 'resource': 'Assets', 'type': 'RESOURCE'}], 'resources': {'Ass...UNCTION'}, {'type': 'INTERVAL', 'unit': 'week', 'value': 8}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}}\nexpected_sql = \"SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_DATE - INTERVAL '8 week'\"\n\n    @pytest.mark.parametrize(\n        \"use_case, user_question, test_case, expected_json, expected_sql\",\n        ConversationAPIHelper.load_test_cases_data(product) # Kindly add the filter in template_mapper.json file before using it\n    )\n    @allure.step(\"Test single-turn conversation API\")\n    def test_single_turn_case(use_case, user_question, test_case, expected_json, expected_sql):\n>       base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n\ntests/q2g/jeeves_singleturn_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/q2g_helper/BaseConversationTest.py:30: in common_test_logic\n    result = validate_jsons(expected_json, actual_json if actual_json else common_json)\nutils/q2g_helper/json_validator.py:632: in validate_jsons\n    results.append(where_clause_check(expected_json, actual_json, resource_map))\nutils/q2g_helper/json_validator.py:333: in where_clause_check\n    result = make_llm_call(where_expected, where_actual)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nwhere_expected = {'lhs': {'name': 'Created Date', 'resource': 'Assets', 'type': 'FIELD'}, 'operator': 'GTE', 'rhs': {'arguments': [{'ar...FUNCTION'}, {'type': 'INTERVAL', 'unit': 'week', 'value': 8}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}\nwhere_actual = {'lhs': {'name': 'Created Date', 'type': 'FIELD'}, 'operator': 'GTE', 'rhs': {'arguments': [{'arguments': [], 'name': ...FUNCTION'}, {'type': 'INTERVAL', 'unit': 'week', 'value': 8}], 'name': 'SUB', 'type': 'FUNCTION'}, 'type': 'CONDITION'}\n\n    def make_llm_call(where_expected, where_actual):\n        # Form LLM input payload\n        input_payload = {\n            \"where_clause_1\": where_expected,\n            \"where_clause_2\": where_actual\n        }\n    \n        # Make the LLM call\n        llm_response = make_openai_post_request(prompt, input_payload)\n    \n>       result_str = llm_response.get(\"choices\")[0].get(\"message\").get(\"content\")\nE       TypeError: 'NoneType' object is not subscriptable\n\nutils/q2g_helper/json_validator.py:287: TypeError","steps":[{"name":"Test single-turn conversation API","time":{"start":1729006403494,"stop":1729006411915,"duration":8421},"status":"broken","statusMessage":"TypeError: 'NoneType' object is not subscriptable\n","statusTrace":"  File \"/Users/rl/PycharmProjects/auroraTestAutomation/APIautomation/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/tests/q2g/jeeves_singleturn_test.py\", line 17, in test_single_turn_case\n    base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/utils/q2g_helper/BaseConversationTest.py\", line 30, in common_test_logic\n    result = validate_jsons(expected_json, actual_json if actual_json else common_json)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/utils/q2g_helper/json_validator.py\", line 632, in validate_jsons\n    results.append(where_clause_check(expected_json, actual_json, resource_map))\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/utils/q2g_helper/json_validator.py\", line 333, in where_clause_check\n    result = make_llm_call(where_expected, where_actual)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/utils/q2g_helper/json_validator.py\", line 287, in make_llm_call\n    result_str = llm_response.get(\"choices\")[0].get(\"message\").get(\"content\")\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^\n","steps":[],"attachments":[],"parameters":[{"name":"use_case","value":"'AGGREGATE_FUNCTION_WITH_TIME'"},{"name":"user_question","value":"'Give me the maximum Cost of Assets in the last 8 weeks'"},{"name":"test_case","value":"517"},{"name":"expected_json","value":"{'select': [{'name': 'MAX', 'arguments': [{'resource': 'Assets', 'name': 'Cost', 'type': 'FIELD'}], 'type': 'FUNCTION'}], 'from': [{'product': 'freshservice', 'resource': 'Assets', 'name': 'Assets', 'type': 'RESOURCE'}], 'where': {'lhs': {'resource': 'Assets', 'name': 'Created Date', 'type': 'FIELD'}, 'type': 'CONDITION', 'rhs': {'name': 'SUB', 'arguments': [{'name': 'CURRENT_DATE', 'arguments': [], 'type': 'FUNCTION'}, {'unit': 'week', 'type': 'INTERVAL', 'value': 8}], 'type': 'FUNCTION'}, 'operator': 'GTE'}, 'resources': {'Assets': {'product': 'freshservice', 'name': 'Assets'}}}"},{"name":"expected_sql","value":"'SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_DATE - INTERVAL '8 week''"}],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"attachments":[{"uid":"ce65aa4af3fb49e8","name":"stdout","source":"ce65aa4af3fb49e8.txt","type":"text/plain","size":4923}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.q2g"},{"name":"suite","value":"jeeves_singleturn_test"},{"name":"host","value":"FWS-CHE-LT-6357"},{"name":"thread","value":"87156-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.q2g.jeeves_singleturn_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_json","value":"{'select': [{'name': 'MAX', 'arguments': [{'resource': 'Assets', 'name': 'Cost', 'type': 'FIELD'}], 'type': 'FUNCTION'}], 'from': [{'product': 'freshservice', 'resource': 'Assets', 'name': 'Assets', 'type': 'RESOURCE'}], 'where': {'lhs': {'resource': 'Assets', 'name': 'Created Date', 'type': 'FIELD'}, 'type': 'CONDITION', 'rhs': {'name': 'SUB', 'arguments': [{'name': 'CURRENT_DATE', 'arguments': [], 'type': 'FUNCTION'}, {'unit': 'week', 'type': 'INTERVAL', 'value': 8}], 'type': 'FUNCTION'}, 'operator': 'GTE'}, 'resources': {'Assets': {'product': 'freshservice', 'name': 'Assets'}}}"},{"name":"expected_sql","value":"'SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_DATE - INTERVAL '8 week''"},{"name":"test_case","value":"517"},{"name":"use_case","value":"'AGGREGATE_FUNCTION_WITH_TIME'"},{"name":"user_question","value":"'Give me the maximum Cost of Assets in the last 8 weeks'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4aa038551bb8e07d.json","parameterValues":["{'select': [{'name': 'MAX', 'arguments': [{'resource': 'Assets', 'name': 'Cost', 'type': 'FIELD'}], 'type': 'FUNCTION'}], 'from': [{'product': 'freshservice', 'resource': 'Assets', 'name': 'Assets', 'type': 'RESOURCE'}], 'where': {'lhs': {'resource': 'Assets', 'name': 'Created Date', 'type': 'FIELD'}, 'type': 'CONDITION', 'rhs': {'name': 'SUB', 'arguments': [{'name': 'CURRENT_DATE', 'arguments': [], 'type': 'FUNCTION'}, {'unit': 'week', 'type': 'INTERVAL', 'value': 8}], 'type': 'FUNCTION'}, 'operator': 'GTE'}, 'resources': {'Assets': {'product': 'freshservice', 'name': 'Assets'}}}","'SELECT MAX(Cost) FROM freshservice.Assets WHERE  `Created Date` >= CURRENT_DATE - INTERVAL '8 week''","517","'AGGREGATE_FUNCTION_WITH_TIME'","'Give me the maximum Cost of Assets in the last 8 weeks'"]}