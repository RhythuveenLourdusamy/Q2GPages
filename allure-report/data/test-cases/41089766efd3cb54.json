{"uid":"41089766efd3cb54","name":"test_single_turn_case[SINGLE_MODULE_WITH_MULTIPLE_LOOKUP-Show me total Tickets with High and Medium Urgency-159-expected_json158-SELECT COUNT(*) FROM Tickets WHERE Urgency IN (High,Medium)]","fullName":"tests.q2g.jeeves_singleturn_test#test_single_turn_case","historyId":"fe0a591b30b1d50b51e44e12b6517b6e","time":{"start":1729005547030,"stop":1729005601894,"duration":54864},"status":"failed","statusMessage":"Failed: API failed due to repeated 504 responses.","statusTrace":"use_case = 'SINGLE_MODULE_WITH_MULTIPLE_LOOKUP'\nuser_question = 'Show me total Tickets with High and Medium Urgency'\ntest_case = 159\nexpected_json = {'from': [{'name': 'Tickets', 'product': 'freshservice', 'resource': 'Tickets', 'type': 'RESOURCE'}], 'resources': {'T...ts', 'type': 'FIELD'}, 'operator': 'IN', 'rhs': {'type': 'LITERAL', 'value': ['High', 'Medium']}, 'type': 'CONDITION'}}\nexpected_sql = 'SELECT COUNT(*) FROM Tickets WHERE Urgency IN (High,Medium)'\n\n    @pytest.mark.parametrize(\n        \"use_case, user_question, test_case, expected_json, expected_sql\",\n        ConversationAPIHelper.load_test_cases_data(product) # Kindly add the filter in template_mapper.json file before using it\n    )\n    @allure.step(\"Test single-turn conversation API\")\n    def test_single_turn_case(use_case, user_question, test_case, expected_json, expected_sql):\n>       base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n\ntests/q2g/jeeves_singleturn_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/q2g_helper/BaseConversationTest.py:13: in common_test_logic\n    response = self.api_helper.get_response_json(user_question, test_case)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.ConversationAPIHelper.ConversationAPIHelper object at 0x11c953740>\nuser_question = 'Show me total Tickets with High and Medium Urgency'\ntest_case = 159\n\n    def get_response_json(self, user_question, test_case):\n        \"\"\"\n        Helper method to construct the request, make the API call, handle retries, and return the response JSON.\n        \"\"\"\n        # Construct request body and headers\n        global jeeves_wf_id\n        request_body = self.construct_request_body(user_question)\n        # Check if the test_case has been encountered before\n        if test_case is None or test_case not in self.test_case_uuid_map:\n            # If not, generate a new UUID and store it\n            self.test_case_uuid_map[test_case] = str(uuid.uuid4())\n    \n        # Return the previously generated or newly generated UUID\n        dialog_source = self.test_case_uuid_map[test_case]\n        headers = self.construct_headers(dialog_source)\n    \n        retries = 0\n        while retries < MAX_RETRIES:\n            # Make the API call\n            response = self.api_helper.post(\n                url=self.get_jeeves_base_url() + \"/v1/api/analytics/conversation\",\n                headers=headers,\n                body=json.dumps(request_body)\n            )\n            if response.headers.__contains__('jeeves_wf_id'):\n                jeeves_wf_id = response.headers['jeeves-wf-id']\n                print(f\"JEEVES_WF_ID {jeeves_wf_id}\")\n    \n    \n            # Retry on 504 or 502 response\n            if response.status_code in (504, 502):\n                retries += 1\n                if retries < MAX_RETRIES:\n                    print(f\"Received {response.status_code} response, retrying {retries}/{MAX_RETRIES} after 10 \"\n                          f\"seconds...\")\n                    time.sleep(10)  # Wait before retrying\n                    continue\n                else:\n                    print(f\"Max retries ({MAX_RETRIES}) reached.\")\n>                   pytest.fail(f\"API failed due to repeated {response.status_code} responses.\\n\")\nE                   Failed: API failed due to repeated 504 responses.\n\nutils/ConversationAPIHelper.py:66: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1729004625624,"stop":1729004625767,"duration":143},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: API failed due to repeated 504 responses.","statusTrace":"use_case = 'SINGLE_MODULE_WITH_MULTIPLE_LOOKUP'\nuser_question = 'Show me total Tickets with High and Medium Urgency'\ntest_case = 159\nexpected_json = {'from': [{'name': 'Tickets', 'product': 'freshservice', 'resource': 'Tickets', 'type': 'RESOURCE'}], 'resources': {'T...ts', 'type': 'FIELD'}, 'operator': 'IN', 'rhs': {'type': 'LITERAL', 'value': ['High', 'Medium']}, 'type': 'CONDITION'}}\nexpected_sql = 'SELECT COUNT(*) FROM Tickets WHERE Urgency IN (High,Medium)'\n\n    @pytest.mark.parametrize(\n        \"use_case, user_question, test_case, expected_json, expected_sql\",\n        ConversationAPIHelper.load_test_cases_data(product) # Kindly add the filter in template_mapper.json file before using it\n    )\n    @allure.step(\"Test single-turn conversation API\")\n    def test_single_turn_case(use_case, user_question, test_case, expected_json, expected_sql):\n>       base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n\ntests/q2g/jeeves_singleturn_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/q2g_helper/BaseConversationTest.py:13: in common_test_logic\n    response = self.api_helper.get_response_json(user_question, test_case)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.ConversationAPIHelper.ConversationAPIHelper object at 0x11c953740>\nuser_question = 'Show me total Tickets with High and Medium Urgency'\ntest_case = 159\n\n    def get_response_json(self, user_question, test_case):\n        \"\"\"\n        Helper method to construct the request, make the API call, handle retries, and return the response JSON.\n        \"\"\"\n        # Construct request body and headers\n        global jeeves_wf_id\n        request_body = self.construct_request_body(user_question)\n        # Check if the test_case has been encountered before\n        if test_case is None or test_case not in self.test_case_uuid_map:\n            # If not, generate a new UUID and store it\n            self.test_case_uuid_map[test_case] = str(uuid.uuid4())\n    \n        # Return the previously generated or newly generated UUID\n        dialog_source = self.test_case_uuid_map[test_case]\n        headers = self.construct_headers(dialog_source)\n    \n        retries = 0\n        while retries < MAX_RETRIES:\n            # Make the API call\n            response = self.api_helper.post(\n                url=self.get_jeeves_base_url() + \"/v1/api/analytics/conversation\",\n                headers=headers,\n                body=json.dumps(request_body)\n            )\n            if response.headers.__contains__('jeeves_wf_id'):\n                jeeves_wf_id = response.headers['jeeves-wf-id']\n                print(f\"JEEVES_WF_ID {jeeves_wf_id}\")\n    \n    \n            # Retry on 504 or 502 response\n            if response.status_code in (504, 502):\n                retries += 1\n                if retries < MAX_RETRIES:\n                    print(f\"Received {response.status_code} response, retrying {retries}/{MAX_RETRIES} after 10 \"\n                          f\"seconds...\")\n                    time.sleep(10)  # Wait before retrying\n                    continue\n                else:\n                    print(f\"Max retries ({MAX_RETRIES}) reached.\")\n>                   pytest.fail(f\"API failed due to repeated {response.status_code} responses.\\n\")\nE                   Failed: API failed due to repeated 504 responses.\n\nutils/ConversationAPIHelper.py:66: Failed","steps":[{"name":"Test single-turn conversation API","time":{"start":1729005547030,"stop":1729005601893,"duration":54863},"status":"failed","statusMessage":"Failed: API failed due to repeated 504 responses.\n\n","statusTrace":"  File \"/Users/rl/PycharmProjects/auroraTestAutomation/APIautomation/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/tests/q2g/jeeves_singleturn_test.py\", line 17, in test_single_turn_case\n    base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/utils/q2g_helper/BaseConversationTest.py\", line 13, in common_test_logic\n    response = self.api_helper.get_response_json(user_question, test_case)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/utils/ConversationAPIHelper.py\", line 66, in get_response_json\n    pytest.fail(f\"API failed due to repeated {response.status_code} responses.\\n\")\n  File \"/Users/rl/PycharmProjects/auroraTestAutomation/APIautomation/lib/python3.12/site-packages/_pytest/outcomes.py\", line 177, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[{"name":"use_case","value":"'SINGLE_MODULE_WITH_MULTIPLE_LOOKUP'"},{"name":"user_question","value":"'Show me total Tickets with High and Medium Urgency'"},{"name":"test_case","value":"159"},{"name":"expected_json","value":"{'select': [{'type': 'FUNCTION', 'name': 'COUNT', 'arguments': [{'type': 'FIELD', 'value': '*', 'resource': 'Tickets'}], 'alias': None}], 'from': [{'type': 'RESOURCE', 'name': 'Tickets', 'resource': 'Tickets', 'product': 'freshservice'}], 'where': {'type': 'CONDITION', 'lhs': {'type': 'FIELD', 'name': 'Urgency', 'resource': 'Tickets'}, 'operator': 'IN', 'rhs': {'type': 'LITERAL', 'value': ['High', 'Medium']}}, 'resources': {'Tickets': {'name': 'Tickets', 'product': 'freshservice'}}}"},{"name":"expected_sql","value":"'SELECT COUNT(*) FROM Tickets WHERE Urgency IN (High,Medium)'"}],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"attachments":[{"uid":"16e54ca944a34e2a","name":"stdout","source":"16e54ca944a34e2a.txt","type":"text/plain","size":3072}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.q2g"},{"name":"suite","value":"jeeves_singleturn_test"},{"name":"host","value":"FWS-CHE-LT-6357"},{"name":"thread","value":"87157-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.q2g.jeeves_singleturn_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_json","value":"{'select': [{'type': 'FUNCTION', 'name': 'COUNT', 'arguments': [{'type': 'FIELD', 'value': '*', 'resource': 'Tickets'}], 'alias': None}], 'from': [{'type': 'RESOURCE', 'name': 'Tickets', 'resource': 'Tickets', 'product': 'freshservice'}], 'where': {'type': 'CONDITION', 'lhs': {'type': 'FIELD', 'name': 'Urgency', 'resource': 'Tickets'}, 'operator': 'IN', 'rhs': {'type': 'LITERAL', 'value': ['High', 'Medium']}}, 'resources': {'Tickets': {'name': 'Tickets', 'product': 'freshservice'}}}"},{"name":"expected_sql","value":"'SELECT COUNT(*) FROM Tickets WHERE Urgency IN (High,Medium)'"},{"name":"test_case","value":"159"},{"name":"use_case","value":"'SINGLE_MODULE_WITH_MULTIPLE_LOOKUP'"},{"name":"user_question","value":"'Show me total Tickets with High and Medium Urgency'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"41089766efd3cb54.json","parameterValues":["{'select': [{'type': 'FUNCTION', 'name': 'COUNT', 'arguments': [{'type': 'FIELD', 'value': '*', 'resource': 'Tickets'}], 'alias': None}], 'from': [{'type': 'RESOURCE', 'name': 'Tickets', 'resource': 'Tickets', 'product': 'freshservice'}], 'where': {'type': 'CONDITION', 'lhs': {'type': 'FIELD', 'name': 'Urgency', 'resource': 'Tickets'}, 'operator': 'IN', 'rhs': {'type': 'LITERAL', 'value': ['High', 'Medium']}}, 'resources': {'Tickets': {'name': 'Tickets', 'product': 'freshservice'}}}","'SELECT COUNT(*) FROM Tickets WHERE Urgency IN (High,Medium)'","159","'SINGLE_MODULE_WITH_MULTIPLE_LOOKUP'","'Show me total Tickets with High and Medium Urgency'"]}