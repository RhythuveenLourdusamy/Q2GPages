{"uid":"fc57db3d4ec49b13","name":"Test Case 28 - SINGLE_MODULE_WITH_METRIC","fullName":"tests.q2g.jeeves_singleturn_test#test_single_turn_case","historyId":"7bc6cb20568ccbad659a2fd671c17b19","time":{"start":1729004715559,"stop":1729004727217,"duration":11658},"status":"failed","statusMessage":"AssertionError: [\"Mismatch in 'from' clause: Expected product=None, Actual product=freshservice\"] JEEVES_WORKFLOW_ID: 50b11334-4365-48b3-a11f-22faa4054a27","statusTrace":"use_case = 'SINGLE_MODULE_WITH_METRIC'\nuser_question = 'Show me Question Score of Survey Question', test_case = 28\nexpected_json = {'from': [{'name': 'Survey Question', 'resource': 'Survey Question', 'type': 'RESOURCE'}], 'resources': {'Survey Quest...', 'product': 'freshservice'}}, 'select': [{'name': 'Question Score', 'resource': 'Survey Question', 'type': 'FIELD'}]}\nexpected_sql = 'SELECT Question Score FROM Survey Question'\n\n    @pytest.mark.parametrize(\n        \"use_case, user_question, test_case, expected_json, expected_sql\",\n        ConversationAPIHelper.load_test_cases_data(product) # Kindly add the filter in template_mapper.json file before using it\n    )\n    @allure.step(\"Test single-turn conversation API\")\n    def test_single_turn_case(use_case, user_question, test_case, expected_json, expected_sql):\n>       base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n\ntests/q2g/jeeves_singleturn_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.q2g_helper.BaseConversationTest.BaseConversationTest object at 0x11c87ee70>\nuse_case = 'SINGLE_MODULE_WITH_METRIC'\nuser_question = 'Show me Question Score of Survey Question', test_case = 28\nexpected_json = {'from': [{'name': 'Survey Question', 'resource': 'Survey Question', 'type': 'RESOURCE'}], 'resources': {'Survey Quest...', 'product': 'freshservice'}}, 'select': [{'name': 'Question Score', 'resource': 'Survey Question', 'type': 'FIELD'}]}\n\n    def common_test_logic(self, use_case, user_question, test_case, expected_json):\n        # time.sleep(30)\n        # Get the response JSON from the API call\n        response = self.api_helper.get_response_json(user_question, test_case)\n    \n        # Assert on the response code\n        assert response.status_code == 200, f\"Expected 200, got {response.status_code}. JEEVES_WORKFLOW_ID: {response.headers.get('jeeves-wf-id')}\"\n    \n        response_json = response.json()\n        jeeves_wf_id = response.headers.get('jeeves-wf-id', 'Unknown')\n    \n        # Extract the 'common_json' field from the response\n        common_json = ConversationAPIHelper.get(response_json, 'common_json')\n        # Fail the test if common_json is empty\n        assert common_json, f\"common_json is empty. Probably a multi-turn use-case. JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\n    \n        # Extract the 'query' field from the common_json, if it is present\n        actual_json = ConversationAPIHelper.get(common_json, 'query')\n    \n        # Validate the actual JSON with the expected JSON\n        result = validate_jsons(expected_json, actual_json if actual_json else common_json)\n    \n        allure.dynamic.title(f\"Test Case {test_case} - {use_case}\")\n    \n        # Assert the validation result\n>       assert result.get(\"result\"), f\"{result.get('message')} JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\nE       AssertionError: [\"Mismatch in 'from' clause: Expected product=None, Actual product=freshservice\"] JEEVES_WORKFLOW_ID: 50b11334-4365-48b3-a11f-22faa4054a27\n\nutils/q2g_helper/BaseConversationTest.py:35: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1729004625624,"stop":1729004625767,"duration":143},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: [\"Mismatch in 'from' clause: Expected product=None, Actual product=freshservice\"] JEEVES_WORKFLOW_ID: 50b11334-4365-48b3-a11f-22faa4054a27","statusTrace":"use_case = 'SINGLE_MODULE_WITH_METRIC'\nuser_question = 'Show me Question Score of Survey Question', test_case = 28\nexpected_json = {'from': [{'name': 'Survey Question', 'resource': 'Survey Question', 'type': 'RESOURCE'}], 'resources': {'Survey Quest...', 'product': 'freshservice'}}, 'select': [{'name': 'Question Score', 'resource': 'Survey Question', 'type': 'FIELD'}]}\nexpected_sql = 'SELECT Question Score FROM Survey Question'\n\n    @pytest.mark.parametrize(\n        \"use_case, user_question, test_case, expected_json, expected_sql\",\n        ConversationAPIHelper.load_test_cases_data(product) # Kindly add the filter in template_mapper.json file before using it\n    )\n    @allure.step(\"Test single-turn conversation API\")\n    def test_single_turn_case(use_case, user_question, test_case, expected_json, expected_sql):\n>       base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n\ntests/q2g/jeeves_singleturn_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.q2g_helper.BaseConversationTest.BaseConversationTest object at 0x11c87ee70>\nuse_case = 'SINGLE_MODULE_WITH_METRIC'\nuser_question = 'Show me Question Score of Survey Question', test_case = 28\nexpected_json = {'from': [{'name': 'Survey Question', 'resource': 'Survey Question', 'type': 'RESOURCE'}], 'resources': {'Survey Quest...', 'product': 'freshservice'}}, 'select': [{'name': 'Question Score', 'resource': 'Survey Question', 'type': 'FIELD'}]}\n\n    def common_test_logic(self, use_case, user_question, test_case, expected_json):\n        # time.sleep(30)\n        # Get the response JSON from the API call\n        response = self.api_helper.get_response_json(user_question, test_case)\n    \n        # Assert on the response code\n        assert response.status_code == 200, f\"Expected 200, got {response.status_code}. JEEVES_WORKFLOW_ID: {response.headers.get('jeeves-wf-id')}\"\n    \n        response_json = response.json()\n        jeeves_wf_id = response.headers.get('jeeves-wf-id', 'Unknown')\n    \n        # Extract the 'common_json' field from the response\n        common_json = ConversationAPIHelper.get(response_json, 'common_json')\n        # Fail the test if common_json is empty\n        assert common_json, f\"common_json is empty. Probably a multi-turn use-case. JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\n    \n        # Extract the 'query' field from the common_json, if it is present\n        actual_json = ConversationAPIHelper.get(common_json, 'query')\n    \n        # Validate the actual JSON with the expected JSON\n        result = validate_jsons(expected_json, actual_json if actual_json else common_json)\n    \n        allure.dynamic.title(f\"Test Case {test_case} - {use_case}\")\n    \n        # Assert the validation result\n>       assert result.get(\"result\"), f\"{result.get('message')} JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\nE       AssertionError: [\"Mismatch in 'from' clause: Expected product=None, Actual product=freshservice\"] JEEVES_WORKFLOW_ID: 50b11334-4365-48b3-a11f-22faa4054a27\n\nutils/q2g_helper/BaseConversationTest.py:35: AssertionError","steps":[{"name":"Test single-turn conversation API","time":{"start":1729004715559,"stop":1729004727216,"duration":11657},"status":"failed","statusMessage":"AssertionError: [\"Mismatch in 'from' clause: Expected product=None, Actual product=freshservice\"] JEEVES_WORKFLOW_ID: 50b11334-4365-48b3-a11f-22faa4054a27\n","statusTrace":"  File \"/Users/rl/PycharmProjects/auroraTestAutomation/APIautomation/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/tests/q2g/jeeves_singleturn_test.py\", line 17, in test_single_turn_case\n    base_conversation_test.common_test_logic(use_case, user_question, test_case, expected_json)\n  File \"/Users/rl/Documents/GitHub/jeeves_automation/utils/q2g_helper/BaseConversationTest.py\", line 35, in common_test_logic\n    assert result.get(\"result\"), f\"{result.get('message')} JEEVES_WORKFLOW_ID: {jeeves_wf_id}\"\n           ^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"use_case","value":"'SINGLE_MODULE_WITH_METRIC'"},{"name":"user_question","value":"'Show me Question Score of Survey Question'"},{"name":"test_case","value":"28"},{"name":"expected_json","value":"{'select': [{'type': 'FIELD', 'name': 'Question Score', 'resource': 'Survey Question'}], 'from': [{'type': 'RESOURCE', 'name': 'Survey Question', 'resource': 'Survey Question'}], 'resources': {'Survey Question': {'name': 'Survey Question', 'product': 'freshservice'}}}"},{"name":"expected_sql","value":"'SELECT Question Score FROM Survey Question'"}],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false}],"attachments":[{"uid":"7328ea7d997b9734","name":"stdout","source":"7328ea7d997b9734.txt","type":"text/plain","size":10079}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.q2g"},{"name":"suite","value":"jeeves_singleturn_test"},{"name":"host","value":"FWS-CHE-LT-6357"},{"name":"thread","value":"87157-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.q2g.jeeves_singleturn_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_json","value":"{'select': [{'type': 'FIELD', 'name': 'Question Score', 'resource': 'Survey Question'}], 'from': [{'type': 'RESOURCE', 'name': 'Survey Question', 'resource': 'Survey Question'}], 'resources': {'Survey Question': {'name': 'Survey Question', 'product': 'freshservice'}}}"},{"name":"expected_sql","value":"'SELECT Question Score FROM Survey Question'"},{"name":"test_case","value":"28"},{"name":"use_case","value":"'SINGLE_MODULE_WITH_METRIC'"},{"name":"user_question","value":"'Show me Question Score of Survey Question'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fc57db3d4ec49b13.json","parameterValues":["{'select': [{'type': 'FIELD', 'name': 'Question Score', 'resource': 'Survey Question'}], 'from': [{'type': 'RESOURCE', 'name': 'Survey Question', 'resource': 'Survey Question'}], 'resources': {'Survey Question': {'name': 'Survey Question', 'product': 'freshservice'}}}","'SELECT Question Score FROM Survey Question'","28","'SINGLE_MODULE_WITH_METRIC'","'Show me Question Score of Survey Question'"]}